# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, hyperledger
# This file is distributed under the same license as the
# hyperledger-fabricdocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: hyperledger-fabricdocs master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-19 19:02+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/cc_service.md:1
msgid "# Chaincode as an external service"
msgstr ""

#: ../../source/cc_service.md:3
msgid ""
"Fabric v2.0 supports chaincode deployment and execution outside of Fabric"
" that enables users to manage a chaincode runtime independently of the "
"peer. This facilitates deployment of chaincode on Fabric cloud "
"deployments such as Kubernetes. Instead of building and launching the "
"chaincode on every peer, chaincode can now run as a service whose "
"lifecycle is managed outside of Fabric. This capability leverages the "
"Fabric v2.0 external builder and launcher functionality which enables "
"operators to extend a peer with programs to build, launch, and discover "
"chaincode. Before reading this topic you should become familiar with the "
"[External Builder and Launcher](./cc_launcher.html) content."
msgstr ""

#: ../../source/cc_service.md:5
msgid ""
"Prior to the availability of the external builders, the chaincode package"
" content was required to be a set of source code files for a particular "
"language which could be built and launched as a chaincode binary. The new"
" external build and launcher functionality now allows users to optionally"
" customize the build process. With respect to running the chaincode as an"
" external service, the build process allows you to specify the endpoint "
"information of the server where the chaincode is running. Hence the "
"package simply consists of the externally running chaincode server "
"endpoint information and TLS artifacts for secure connection. TLS is "
"optional but highly recommended for all environments except a simple test"
" environment."
msgstr ""

#: ../../source/cc_service.md:7
msgid ""
"The rest of this topic describes how to configure chaincode as an "
"external service:"
msgstr ""

#: ../../source/cc_service.md:9
msgid "[Packaging chaincode](#packaging-chaincode)"
msgstr ""

#: ../../source/cc_service.md:10
msgid ""
"[Configuring a peer to process external chaincode](#configuring-a-peer-"
"to-process-external-chaincode)"
msgstr ""

#: ../../source/cc_service.md:11
msgid ""
"[External builder and launcher sample scripts](#external-builder-and-"
"launcher-sample-scripts)"
msgstr ""

#: ../../source/cc_service.md:12
msgid ""
"[Writing chaincode to run as an external service](#writing-chaincode-to-"
"run-as-an-external-service)"
msgstr ""

#: ../../source/cc_service.md:13
msgid "[Deploying the chaincode](#deploying-the-chaincode)"
msgstr ""

#: ../../source/cc_service.md:14
msgid ""
"[Running the chaincode as an external service](#running-the-chaincode-as-"
"an-external-service)"
msgstr ""

#: ../../source/cc_service.md:16
msgid ""
"**Note:** This is an advanced feature that will likely require custom "
"packaging of the peer image. For example, the following samples use `jq` "
"and `bash`, which are not included in the current official `fabric-peer` "
"image."
msgstr ""

#: ../../source/cc_service.md:18
msgid "## Packaging chaincode"
msgstr ""

#: ../../source/cc_service.md:20
msgid ""
"With the Fabric v2.0 chaincode lifecycle, chaincode is "
"[packaged](./cc_launcher.html#chaincode-packages) and installed in a "
"`.tar.gz` format. The following `myccpackage.tgz` archive  demonstrates "
"the required structure:"
msgstr ""

#: ../../source/cc_service.md:22
msgid "```sh $ tar xvfz myccpackage.tgz metadata.json code.tar.gz ```"
msgstr ""

#: ../../source/cc_service.md:28
msgid ""
"The chaincode package should be used to provide two pieces of information"
" to the external builder and launcher process * identify if the chaincode"
" is an external service. The `bin/detect` section describes an approach "
"using the `metadata.json` file * provide chaincode endpoint information "
"in a `connection.json` file placed in the release directory. The "
"`bin/run` section describes the `connection.json` file"
msgstr ""

#: ../../source/cc_service.md:32
msgid ""
"There is plenty of flexibility to gathering the above information. The "
"sample scripts in the [External builder and launcher sample scripts"
"](#external-builder-and-launcher-sample-scripts) illustrate a simple "
"approach to providing the information. As an example of flexibility, "
"consider packaging couchdb index files (see [Add the index to your "
"chaincode folder](couchdb_tutorial.html#add-the-index-to-your-chaincode-"
"folder)). Sample scripts below describe an approach to packaging the "
"files into code.tar.gz."
msgstr ""

#: ../../source/cc_service.md:35
msgid ""
"``` tar cfz code.tar.gz connection.json metadata tar cfz $1-pkg.tgz "
"metadata.json code.tar.gz ```"
msgstr ""

#: ../../source/cc_service.md:40
msgid "## Configuring a peer to process external chaincode"
msgstr ""

#: ../../source/cc_service.md:42
msgid ""
"In this section we go over the configuration needed * to detect if the "
"chaincode package identifies an external chaincode service * to create "
"the `connection.json` file in the release directory"
msgstr ""

#: ../../source/cc_service.md:46
msgid "### Modify the peer core.yaml to include the externalBuilder"
msgstr ""

#: ../../source/cc_service.md:48
msgid "Assume the scripts are on the peer in the `bin` directory as follows ```"
msgstr ""

#: ../../source/cc_service.md:50
msgid "<fully qualified path on the peer's env> └── bin"
msgstr ""

#: ../../source/cc_service.md:52
msgid "├── build ├── detect └── release"
msgstr ""

#: ../../source/cc_service.md:55 ../../source/cc_service.md:63
#: ../../source/cc_service.md:101 ../../source/cc_service.md:137
msgid "```"
msgstr ""

#: ../../source/cc_service.md:57
msgid ""
"Modify the `chaincode` stanza of the peer `core.yaml` file to include the"
" `externalBuilders` configuration element:"
msgstr ""

#: ../../source/cc_service.md:59
msgid "```yaml externalBuilders:"
msgstr ""

#: ../../source/cc_service.md:61
msgid "name: myexternal path: <fully qualified path on the peer's env>"
msgstr ""

#: ../../source/cc_service.md:65
msgid "### External builder and launcher sample scripts"
msgstr ""

#: ../../source/cc_service.md:67
msgid ""
"To help understand what each script needs to contain to work with the "
"chaincode as an external service, this section contains samples of  "
"`bin/detect` `bin/build`, `bin/release`, and `bin/run` scripts."
msgstr ""

#: ../../source/cc_service.md:69
msgid ""
"**Note:** These samples use the `jq` command to parse json. You can run "
"`jq --version` to check if you have it installed. Otherwise, install `jq`"
" or suitably modify the scripts."
msgstr ""

#: ../../source/cc_service.md:71
msgid "#### bin/detect"
msgstr ""

#: ../../source/cc_service.md:73
msgid ""
"The `bin/detect script` is responsible for determining whether or not a "
"buildpack should be used to build a chaincode package and launch it.  For"
" chaincode as an external service, the sample script looks for a `type` "
"property set to `external` in the `metadata.json` file:"
msgstr ""

#: ../../source/cc_service.md:75
msgid "```json {\"path\":\"\",\"type\":\"external\",\"label\":\"mycc\"} ```"
msgstr ""

#: ../../source/cc_service.md:79
msgid "The peer invokes detect with two arguments:"
msgstr ""

#: ../../source/cc_service.md:81
msgid "``` bin/detect CHAINCODE_SOURCE_DIR CHAINCODE_METADATA_DIR ```"
msgstr ""

#: ../../source/cc_service.md:85
msgid "A sample `bin/detect` script could contain:"
msgstr ""

#: ../../source/cc_service.md:87 ../../source/cc_service.md:113
#: ../../source/cc_service.md:174
msgid "```sh"
msgstr ""

#: ../../source/cc_service.md:89 ../../source/cc_service.md:115
#: ../../source/cc_service.md:176
msgid "#!/bin/bash"
msgstr ""

#: ../../source/cc_service.md:91 ../../source/cc_service.md:117
#: ../../source/cc_service.md:178
msgid "set -euo pipefail"
msgstr ""

#: ../../source/cc_service.md:93
msgid ""
"METADIR=$2 #check if the \"type\" field is set to \"external\" if [ "
"\"$(jq -r .type \"$METADIR/metadata.json\")\" == \"external\" ]; then"
msgstr ""

#: ../../source/cc_service.md:96 ../../source/cc_service.md:135
#: ../../source/cc_service.md:194
msgid "exit 0"
msgstr ""

#: ../../source/cc_service.md:97 ../../source/cc_service.md:126
#: ../../source/cc_service.md:133 ../../source/cc_service.md:185
#: ../../source/cc_service.md:195
msgid "fi"
msgstr ""

#: ../../source/cc_service.md:99
msgid "exit 1"
msgstr ""

#: ../../source/cc_service.md:103
msgid "#### bin/build"
msgstr ""

#: ../../source/cc_service.md:105
msgid ""
"For chaincode as an external service, the sample build script assumes the"
" chaincode package's `code.tar.gz` file contains `connection.json` which "
"it simply copies to the `BUILD_OUTPUT_DIR`. The peer invokes the build "
"script with three arguments:"
msgstr ""

#: ../../source/cc_service.md:107
msgid ""
"``` bin/build CHAINCODE_SOURCE_DIR CHAINCODE_METADATA_DIR "
"BUILD_OUTPUT_DIR ```"
msgstr ""

#: ../../source/cc_service.md:111
msgid "A sample `bin/build` script could contain:"
msgstr ""

#: ../../source/cc_service.md:119
msgid "SOURCE=$1 OUTPUT=$3"
msgstr ""

#: ../../source/cc_service.md:122
msgid ""
"#external chaincodes expect connection.json file in the chaincode package"
" if [ ! -f \"$SOURCE/connection.json\" ]; then"
msgstr ""

#: ../../source/cc_service.md:124
msgid ">&2 echo \"$SOURCE/connection.json not found\" exit 1"
msgstr ""

#: ../../source/cc_service.md:128
msgid ""
"#simply copy the endpoint information to specified output location cp "
"$SOURCE/connection.json $OUTPUT/connection.json"
msgstr ""

#: ../../source/cc_service.md:131
msgid "if [ -d \"$SOURCE/metadata\" ]; then"
msgstr ""

#: ../../source/cc_service.md:132
msgid "cp -a $SOURCE/metadata $OUTPUT/metadata"
msgstr ""

#: ../../source/cc_service.md:139
msgid "#### bin/release"
msgstr ""

#: ../../source/cc_service.md:141
msgid ""
"For chaincode as an external service, the `bin/release` script is "
"responsible for providing the `connection.json` to the peer by placing it"
" in the `RELEASE_OUTPUT_DIR`.  The `connection.json` file has the "
"following JSON structure"
msgstr ""

#: ../../source/cc_service.md:143
msgid ""
"**address** - chaincode server endpoint accessible from peer. Must be "
"specified in “<host>:<port>” format."
msgstr ""

#: ../../source/cc_service.md:144
msgid ""
"**dial_timeout** - interval to wait for connection to complete. Specified"
" as a string qualified with time units (e.g, \"10s\", \"500ms\", \"1m\")."
" Default is “3s” if not specified."
msgstr ""

#: ../../source/cc_service.md:145
msgid ""
"**tls_required** - true or false. If false, \"client_auth_required\", "
"\"client_key\", \"client_cert\", and \"root_cert\" are not required. "
"Default is “true”."
msgstr ""

#: ../../source/cc_service.md:146
msgid ""
"**client_auth_required** - if true, \"client_key\" and \"client_cert\" "
"are required. Default is false. It is ignored if tls_required is false."
msgstr ""

#: ../../source/cc_service.md:147
msgid "**client_key** - PEM encoded string of the client private key."
msgstr ""

#: ../../source/cc_service.md:148
msgid "**client_cert**  - PEM encoded string of the client certificate."
msgstr ""

#: ../../source/cc_service.md:149
msgid "**root_cert**  - PEM encoded string of the server (peer) root certificate."
msgstr ""

#: ../../source/cc_service.md:151
msgid "For example:"
msgstr ""

#: ../../source/cc_service.md:153
msgid "```json {"
msgstr ""

#: ../../source/cc_service.md:155
msgid ""
"\"address\": \"your.chaincode.host.com:9999\", \"dial_timeout\": \"10s\","
" \"tls_required\": \"true\", \"client_auth_required\": \"true\", "
"\"client_key\": \"-----BEGIN EC PRIVATE KEY----- ... -----END EC PRIVATE "
"KEY-----\", \"client_cert\": \"-----BEGIN CERTIFICATE----- ... -----END "
"CERTIFICATE-----\", \"root_cert\": \"-----BEGIN CERTIFICATE---- ... "
"-----END CERTIFICATE-----\""
msgstr ""

#: ../../source/cc_service.md:163 ../../source/cc_service.md:221
#: ../../source/cc_service.md:225 ../../source/cc_service.md:239
#: ../../source/cc_service.md:243 ../../source/cc_service.md:245
msgid "}"
msgstr ""

#: ../../source/cc_service.md:165
msgid ""
"As noted in the `bin/build` section, this sample assumes the chaincode "
"package directly contains the `connection.json` file which the build "
"script copies to the `BUILD_OUTPUT_DIR`. The peer invokes the release "
"script with two arguments:"
msgstr ""

#: ../../source/cc_service.md:167
msgid "``` bin/release BUILD_OUTPUT_DIR RELEASE_OUTPUT_DIR ```"
msgstr ""

#: ../../source/cc_service.md:171
msgid "A sample `bin/release` script could contain:"
msgstr ""

#: ../../source/cc_service.md:180
msgid "BLD=\"$1\" RELEASE=\"$2\""
msgstr ""

#: ../../source/cc_service.md:183
msgid "if [ -d \"$BLD/metadata\" ]; then"
msgstr ""

#: ../../source/cc_service.md:184
msgid "cp -a \"$BLD/metadata/\"* \"$RELEASE/\""
msgstr ""

#: ../../source/cc_service.md:187
msgid ""
"#external chaincodes expect artifacts to be placed under "
"\"$RELEASE\"/chaincode/server if [ -f $BLD/connection.json ]; then"
msgstr ""

#: ../../source/cc_service.md:189
msgid ""
"mkdir -p \"$RELEASE\"/chaincode/server cp $BLD/connection.json "
"\"$RELEASE\"/chaincode/server"
msgstr ""

#: ../../source/cc_service.md:192
msgid ""
"#if tls_required is true, copy TLS files (using above example, the fully "
"qualified path for these fils would be \"$RELEASE\"/chaincode/server/tls)"
msgstr ""

#: ../../source/cc_service.md:197
msgid "exit 1 ```"
msgstr ""

#: ../../source/cc_service.md:200
msgid "## Writing chaincode to run as an external service"
msgstr ""

#: ../../source/cc_service.md:202
msgid ""
"Currently, the chaincode as an external service model is only supported "
"by GO chaincode shim. In Fabric v2.0, the GO shim API adds a "
"`ChaincodeServer` type that developers should use to create a chaincode "
"server.  The `Invoke` and `Query` APIs are unaffected. Developers should "
"write to the `shim.ChaincodeServer` API, then build the chaincode and run"
" it in the external environment of choice. Here is a simple sample "
"chaincode program to illustrate the pattern:"
msgstr ""

#: ../../source/cc_service.md:204
msgid "```go"
msgstr ""

#: ../../source/cc_service.md:206
msgid "package main"
msgstr ""

#: ../../source/cc_service.md:211
msgid "import ("
msgstr ""

#: ../../source/cc_service.md:209
msgid "\"fmt\""
msgstr ""

#: ../../source/cc_service.md:211
msgid ""
"\"github.com/hyperledger/fabric-chaincode-go/shim\" pb "
"\"github.com/hyperledger/fabric-protos-go/peer\""
msgstr ""

#: ../../source/cc_service.md:213
msgid ")"
msgstr ""

#: ../../source/cc_service.md:215
msgid ""
"// SimpleChaincode example simple Chaincode implementation type "
"SimpleChaincode struct { }"
msgstr ""

#: ../../source/cc_service.md:219
msgid ""
"func (s *SimpleChaincode) Init(stub shim.ChaincodeStubInterface) "
"pb.Response {"
msgstr ""

#: ../../source/cc_service.md:220
msgid "// init code"
msgstr ""

#: ../../source/cc_service.md:223
msgid ""
"func (s *SimpleChaincode) Invoke(stub shim.ChaincodeStubInterface) "
"pb.Response {"
msgstr ""

#: ../../source/cc_service.md:224
msgid "// invoke code"
msgstr ""

#: ../../source/cc_service.md:227
msgid ""
"//NOTE - parameters such as ccid and endpoint information are hard coded "
"here for illustration. This can be passed in in a variety of standard "
"ways func main() {"
msgstr ""

#: ../../source/cc_service.md:242
msgid ""
"//The ccid is assigned to the chaincode on install (using the “peer "
"lifecycle chaincode install <package>” command) for instance"
msgstr ""

#: ../../source/cc_service.md:230
msgid ""
"ccid := "
"\"mycc:fcbf8724572d42e859a7dd9a7cd8e2efb84058292017df6e3d89178b64e6c831\""
msgstr ""

#: ../../source/cc_service.md:238
msgid "server := &shim.ChaincodeServer{"
msgstr ""

#: ../../source/cc_service.md:233
msgid ""
"CCID: ccid, Address: \"myhost:9999\" CC: new(SimpleChaincode), TLSProps: "
"shim.TLSProperties{"
msgstr ""

#: ../../source/cc_service.md:237
msgid "Disabled: true,"
msgstr ""

#: ../../source/cc_service.md:238
msgid "},"
msgstr ""

#: ../../source/cc_service.md:240
msgid "err := server.Start() if err != nil {"
msgstr ""

#: ../../source/cc_service.md:242
#, python-format
msgid "fmt.Printf(\"Error starting Simple chaincode: %s\", err)"
msgstr ""

#: ../../source/cc_service.md:246
msgid ""
"The key to running the chaincode as an external service is the use of "
"`shim.ChaincodeServer`. This uses the new shim API `shim.ChaincodeServer`"
" with the chaincode service properties described below:"
msgstr ""

#: ../../source/cc_service.md:248
msgid ""
"**CCID** (string)- CCID should match chaincode's package name on peer. "
"This is the `CCID` associated with the installed chaincode as returned by"
" the `peer lifecycle chaincode install <package>` CLI command. This can "
"be obtained post-install using the \"peer lifecycle chaincode "
"queryinstalled\" command."
msgstr ""

#: ../../source/cc_service.md:249
msgid ""
"**Address** (string) - Address is the listen address of the chaincode "
"server"
msgstr ""

#: ../../source/cc_service.md:250
msgid "**CC** (Chaincode) -  CC is the chaincode that handles Init and Invoke"
msgstr ""

#: ../../source/cc_service.md:251
msgid ""
"**TLSProps** (TLSProperties) - TLSProps is the TLS properties passed to "
"chaincode server"
msgstr ""

#: ../../source/cc_service.md:252
msgid ""
"**KaOpts** (keepalive.ServerParameters) -  KaOpts keepalive options, "
"sensible defaults provided if nil"
msgstr ""

#: ../../source/cc_service.md:254
msgid "Then build the chaincode as suitable to your GO environment."
msgstr ""

#: ../../source/cc_service.md:256
msgid "## Deploying the chaincode"
msgstr ""

#: ../../source/cc_service.md:258
msgid ""
"When the GO chaincode is ready for deployment, you can package the "
"chaincode as explained in the [Packaging chaincode](#packaging-chaincode)"
" section and deploy the chaincode as explained in the [Fabric chaincode "
"lifecycle](./chaincode_lifecycle.html) concept topic."
msgstr ""

#: ../../source/cc_service.md:260
msgid "## Running the chaincode as an external service"
msgstr ""

#: ../../source/cc_service.md:262
msgid ""
"Create the chaincode as specified in the [Writing chaincode to run as an "
"external service](#writing-chaincode-to-run-as-an-external-service) "
"section. Run the built executable in your environment of choice, such as "
"Kubernetes or directly as a process on the peer machine."
msgstr ""

#: ../../source/cc_service.md:264
msgid ""
"Using this chaincode as an external service model, installing the "
"chaincode on each peer is no longer required. With the chaincode endpoint"
" deployed to the peer instead and the chaincode running, you can continue"
" the normal process of committing the chaincode definition to the channel"
" and invoking the chaincode."
msgstr ""

#: ../../source/cc_service.md:267
msgid ""
"<!--- Licensed under Creative Commons Attribution 4.0 International "
"License https://creativecommons.org/licenses/by/4.0/ -->"
msgstr ""

